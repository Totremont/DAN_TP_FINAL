
# The pwd for this file should be tp_final/compose
# Use PORT to define both container and host's ports and EXPOSE to define only container's
# use --pull=never to use only local images

name: marketshare

services:

  ##### Microservices
  ms.frontend:
    image: ms_frontend:v2
    build:
      context: ../frontend
    ports:
      - 443:443
    develop:
      watch:
        - action: sync
          path: ../frontend
          target: /usr/src/app
          ignore:
            - node_modules/

  ms.auth:
    image: ms_auth:v2
    build:
      context: ../ms_authorization
    expose:
      - 8040

  ms.products:
    image: ms_products:v2
    build:
      context: ../ms_productos
    expose:
      - 8060
    depends_on:
      db.products:
        condition: service_healthy
    volumes:
      - products_db-data-images:/usr/src/app/public/images
    develop:
      watch:
        - action: sync
          path: ../ms_productos
          target: /usr/src/app
          ignore:
            - node_modules/

  ms.users:
    image: ms_users:v2
    build:
      context: ../ms_usuarios
    expose:
      - 8070
    depends_on:
      db.users:
        condition: service_healthy
  
  #Requires outside network to pull data from AtlasDB
  ms.orders:
    image: ms_orders:v2
    build:
      context: ../ms_pedidos
    ports:
      - 8050:8050
    develop:
      watch:
        - action: sync
          path: ../ms_pedidos
          target: /usr/src/app
          ignore:
            - node_modules/

  ##### Databases
  db.products:
    image: postgres
    restart: always
    user: postgres
    secrets:
      - db-password
    volumes:
      - products_db-data:/var/lib/postgresql/data
      #Copy the init script to the container's entrypoint path
      - ./products_db-init.sql:/docker-entrypoint-initdb.d/db_script.sql
    environment:
      POSTGRES_DB: dan_products_db
      POSTGRES_PASSWORD_FILE: /run/secrets/db-password
    expose:
      - 5432 
    healthcheck:
      test: [ "CMD", "pg_isready" ]
      interval: 10s
      timeout: 5s
      retries: 5

  db.users:
    image: mysql
    restart: always
    secrets:
      - db-password
    expose:
      - 3306
    volumes:
      - users_db-data:/var/lib/mysql
      - ./users_db-init.sql:/docker-entrypoint-initdb.d/db_script.sql
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db-password
      MYSQL_DATABASE:  dan_users_db
    healthcheck:
      test: mysqladmin ping -h 127.0.0.1 -u root --password=$(cat /run/secrets/db-password)
      start_period: 5s
      interval: 5s
      timeout: 5s
      retries: 5

volumes:
  products_db-data:
  users_db-data:
  products_db-data-images:

secrets:
  db-password:
    file: db-password.txt


